{
    // Place your Area di lavoro webgl-image-processing snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "Starter": {
        "scope": "javascript",
        "prefix": "starter",
        "body": [
            "const gui = new dat.GUI();",
            "const canvas = document.createElement(\"canvas\");",
            "document.body.appendChild(canvas);",
            "",
            "const gl = canvas.getContext(\"webgl\");",
            "",
            "const filters = {};",
            "",
            "const draw = requestAnimationFrame.bind(null, () => {",
            "	gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);",
            "	gl.clearColor(1, 0, 0, 1);",
            "	gl.clear(gl.COLOR_BUFFER_BIT);",
            "});"
        ]
    },
    "Setup GUI": {
        "scope": "javascript",
        "prefix": "gui",
        "body": [
            "for (const name of Object.keys(filters)) {",
            "	gui.add(filters, name, -1, 1, 0.01).onChange(draw);",
            "}"
        ]
    },
    "Create Shader": {
        "scope": "javascript",
        "prefix": "cshader",
        "body": [
            "const $1 = gl.createShader($2);",
            "gl.shaderSource($1, ``);",
            "gl.compileShader($1);"
        ]
    },
    "Create program": {
        "scope": "javascript",
        "prefix": "cprogram",
        "body": [
            "const program = gl.createProgram();",
            "gl.attachShader(program, vertexShader);",
            "gl.attachShader(program, fragmentShader);",
        ]
    },
    "Texture wrapping": {
        "scope": "javascript",
        "prefix": "twrap",
        "body": [
            "gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, $1);",
            "gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, $1);"
        ]
    },
    "Texture filters": {
        "scope": "javascript",
        "prefix": "tfilters",
        "body": [
            "gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, $1);",
            "gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, $1);"
        ]
    }
}
